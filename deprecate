#!/usr/bin/python
import subprocess
import os
import sys
import traceback

def _git(*args):
  return subprocess.Popen(['git']+list(args), stdout=subprocess.PIPE).communicate()[0]

#get top level of the repository
topLevel = _git('rev-parse', '--show-toplevel')

def depHelp():
  print "Usage: deprecate [OPTION] [VALUE] \n"
  print "deprecate is a utility that marks files within a git repository as deprecated."
  print "It can add/remove files to a .deprecate file in the root of a repository."
  print "You can also add brief descriptions and information attached to these files.\n\n"
  print "--help: Displays available arguments and information."

def depShow():
  curDir = os.getcwd()
  relPath = os.path.relpath(os.getcwd(), topLevel)


  #find and open .deprecate file
  pathToDep = os.path.join(topLevel.strip('\n'), '.deprecate')
  if os.path.isfile(pathToDep) :
    dep = open(pathToDep, 'r')
    for line in dep:
      if line[:3] == 'd: ':
        print 'directory: '+line
        lineLen = len(line[3:])
        print 'relPath '+relPath
        print 'relPath[:lineLen] '+relPath[:lineLen]
        print 'line[3:] '+line[3:]
        if relPath[:lineLen] == line[3:]:
          print 'match'
      elif line[:3] == 'f: ':
        print 'file: '+line

    dep.close()

methods = {
  "help" : depHelp,
  "show" : depShow
}

method = sys.argv[1]
toCallArg = ''

try:
  if sys.argv[2]:
    toCallArg = sys.argv[2]
except IndexError:
  pass

if method and toCallArg != '':
  try:
    methods[method](toCallArg)
  except Exception:
    print 'Your method is not defined or your arguments are missing or invalid. Try --help'
    print traceback.print_exc()
elif method and toCallArg == '':
  try:
    methods[method]()
  except Exception:
    print 'Your method is not defined or your arguments are missing or invalid. Try --help'
    print traceback.print_exc()
